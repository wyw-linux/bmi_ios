workflows:
  ios-project-debug: # workflow ID
    name: iOS debug # workflow name
    environment:
      xcode: latest
      cocoapods: default
      vars:
        XCODE_PROJECT: "BMI Calculator.xcodeproj" # <-- Put the name of your project here.
        XCODE_SCHEME: "BMI Calculator" # <-- Put the name of your scheme here.
    scripts:
      - name: Run tests
        script: |
          xcodebuild \
          -project "$XCODE_PROJECT" \
          -scheme "$XCODE_SCHEME" \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 12,OS=14.1' \
          clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - name: Build debug app
        script: |
          xcodebuild build -project "$XCODE_PROJECT" \
          -scheme "$XCODE_SCHEME" \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
    artifacts:
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    publishing:
      email:
        recipients:
          - sbis1999@gmail.com
  ios-project-release:
    name: iOS release
    environment:
      vars:
        CM_CERTIFICATE: Encrypted(Z0FBQUFBQmdtMlpqcUtQQlgzMDhoZ3FnNjY5YllZMmdFS3dRZ1VSQ0VKUGx1RXo0dXcyMGw5TlJ6dzVOd0w5eXdrVGxrTHF4SF9GenJ1dlVHdlM0NWNXVzlWUWxnZFk4TXR2SDdVdUdnNnhHNFRqOFF0N0VfTlZSRDZKVW5zR3VEdERvd3c2V1Z0eUhMRHJrVkpNNWFzR0p1ZzU2QTN5Z3Byd2Y1MXA3R3hNWTVkdXR4SVZTQkhYdEN4SmR4R3hlNGFJbDdGQmlXbk9IUFc0bC1Sc0ZnZGUwblhuN2dzOVNaOXQtTEo1N21aOUlMeGY2LXZTdmxIdExhZS14Yjdad2lNU1dhb19qWVQzVEVIWlVfczFFc0tsNUZWNWI0UzBHR253eEJJdEU3LWsyVjVKMUdCY2l4LTFDaUZBMDBIVjdDUk9CMU5lbVp2UF9lT19WeEhwQ3hrX1dWQkZHSEFFallTcWxVdjRmVWNrWTg5Y3VHZ2ZUQnJPVUJ2Q1hVTm8zTEkwOUFBck1xWUlsSk0tcVBwU1NUd1BDcUZSMXIxM2laTGVLVnQ5c1hkZ2JxV1psS1QwUEp5clB3YTE4Zmh4YjZIWEx2aTZBYmJzeVZrWVhSU0tGN0pnUnVmakktRXhGX19tdmtEazBoSTF5cFpfZGFMRHNxTUJRaHZfWEM5enVJb1ZlMmRCYmtRZVEtb1hVM3NHOUlXemhhV1prZm03V0pQRk9Cc0xFM1NPOUNjZExCbzNSNk9ZNGFnWXYwQkRJdnNVWXBCSVJnM0NtSFRoZnZpS0Rtd3Y1a3Rac2cwUkJ1dkdzNUhvUG5yM1lsaHg3dUVxOXpFd2toT2ZQNUdpcXR5M05jdVdtUjNoU1l5X181X0Y3X0tfUlBZbHdCS1NISHZOeEVOZnhPdkZGX2ZGdDFUblpqOUN1b2M2dDhrMjNpLWRmSUdWYmV4R0N0TjZ5WVhka3pRNnRwcEJZSlBrV3MydFUwOVNnVk93XzRyMGhOMTlod0RQVHdTSmRNZWNuNFZmdGtLS3ZCY3ROMkhxSUIyNHkzTWtMQmRJb1JWeHA0UmlHZFZVYnJObWlYaTBHTVZsLUhJelJMM21aWnI4N2R5X3BlazFwVjRTQlB5UmdfVk8yb3psSU9qQS1pRDZnZnVJVTdwb2pIODVtZ2RBM1hqQ0JFTVFKSmJraS1yNXpDWi16ZWktOTF5VHlvbngzdUx2eTByY0tLXzlERHBFRjlEQmE4bXhVWjZoX3VUM09wa2wzMG41Y2tVamEtNlcxUlo2S3FBREp3b0VOSFR5dGFpdWo2NldKR0ViRVEyNTFMQWMtcUkxN2R6TDhfWFZaYi1BSnVHYXpkRkxZTzNFSzZZVFBDUjlVSHFpYlNUeDAySzVKOExwMW4wM25td0NCaVdTbTVkejhiNnpQNFdjODVkWGxvQ256RGl3RkRFMEtuT3lwU0hYWlNtS09NOVpaVnVOX0JLbVBXZEo5MVhKejU4eE5lbjk0VDdrUHBJQU14VTBjenl1ZU1EZjlpLVhlVzNtdWJDVEVUTDFfV21udC1FTnJYNC1QLXRqQ1FZb0dGYmRrVXVNTlp0blpKdEtVc3F1ekNPOW83M0pUWVNsQlBrNXRqV2V3cnlFUEtJTEM1NHF0eHBNTzVaMHdaVnd6aU00SVpOOHIyTlBONDlBRHFlZGcybldweDZ6QWZOT2FoWVIwV2dhSVBla2xpODZjdWVMNm1YRjVHcGdFZzBfUnFfSGZCUTdJcUd6Y3kzYzJ4a25MVkhJVUFfbUZsX2taeHFEWlF0UkxjdXZYN3ZLNWM4VnB5bmVEa3A4bGlxM2xRYzkwVEQ1bzN6THFXR0NwTDVhUnh1MHNXdG1HWEc0RFpicE9rX0V1UG93X3R5dmwzWEtzR2JBMF8zMVh6bjFWVThxZEl5UnZXMG0tUmFfRWxUekdrb29MTzlUZGlReXlSbTZXSGhMS0x5NGU5QkVac2I4dXAybi0tNUMzMElpRnZXSmdVR19OaHpMNzQ3VUhOS3lnOVhnX1V6cjJsYUJRVHg0MWtTVi11clpES3NWR2Y1M05lRWEzaHE3azc2Tkd0Sl80TlpScnVqTzVJMXJZdldiWEJta004Y3dhNzBGcXNJVHZkakFwNExGVE1McUFJT2JFaUNidlRWaEh3NHBvUFBvMmE4S3U3NWMxLTNXMWQ2OXBkTGFjVkQzeEZLLUJOSVlCN01qcUN4b2VESmwtbUh5OEFwM21KekExVUJzZ3FwLWNjSEtBQ1lORWZxeXBwbWpZSUFjZ3VrUEV6YUxtcGZZTlhpQUtSNXlZTlRYZjBKV0RUa1R1TVAyY1F5SHhqV1R1cHVHUEFPYnlHQnRsYUktb2p1QTI4RmozZWlZR0ZieUtmRVlEVjFrdDRCU2Vhc3dWTjhRN1RDUl83RWFESTcySzI2WkRDR2hYdlBSWl95dWZ1ZmVpUG85dFFlenlrZl8yclFkNkVKTkpTbmFKVER4dW05aEs5WkNreHAtdmh3NDIxT0cxMkVGZXlVblRIMzZRanFja1EyTk51R3hQaGVjSWo1SXJLNURETG03YmpQZWt2SXhsb0ZhcVB1YVNGdnZhdy1kRWNKdlZmd2lPTlRhNUU5VzFGTjNaY0Y3cnF6WmpXRnIxcUZxeTJlbERNTjY1UGVKYjNfMEhjSi1sYmNFaFZOdFFzTVlEVlVFY0FjbWRqbXRFOGVwUl9lWGU2S1lTaENqUTJzRzdqWWR5U0Y2VzNaOUQydW8zWkt3aU9lcWI3a1RoYjlIeEh1ajZJS3JWckFnYUhlODF0b0lyVURuVEhXY3Rkc01wSi04OEp6ZVNCLTBRd2VBd2lGOFkyekpidDhqQm9iS2N1SFVpeGhRMEhXWms0QnJ3dnpkb0t4NWYzMzdacjZHOVNNclU5cnI5TmVFVWlNWk5FemZzOHFBWUdSbXNXcVhtaFVpWjB2Q2liOE9zcW9tVEdjUWxPT2xpYXNFSWRnRUpFVUxWMnhDS3lwSnl4RUlUVXFMN3RLYjMwaXNBblVWNm5jSWRXODRHQnVtcXZtSUFjN3dsWTBYTTg1VHRnNnZjNWNFNVA1VTQ5NE5RN05lV1dYSFI3UUt0TXFUeUVMeVlvdG1keDVjU2RILWRYRUk3OEpZTzVCVFRWV01MS3ZLY0tweXNGbGEzQlo2LTIwZ2ZpdXF3NDdTZF9wTmR1bk5oTTJ3R2RRaEFBbTM1eWs0UC1PcklDcU51bzE5UllwcVlKVVJzZUpRRXRFUFQtRGJBQzB2NHpuemFmWl9SaEVVSTJTTTctVGxwOTlTZDRDZWVvZ2t4TnZINkVuTDFZQVFJUGh4cXpZel9nU21PRlVkUXBUcTJqOWFJT0gyWjJMUnVtd0VDclFfTWlVVXA3Qi1ZNXNhY3NYbTZQQ2JNRlc3OWVpc0pKaGpWYjdMd19lMTg1eHF5Sk9KTHR0azU0TzZDNHFUMWQ4V0UybG41Q3AxMDZBVlpkdzR5UUQ2ZXVFT3V0VzZQNDM4WkpRaF9VTUhUbHhSX200WmMtYWlxaW84OHNvVXdHYUhYc0p6Zy0yS0hhandYQ3RTUjNXTXpkS19mOUROWUZERDNuZk1hYWJFR3dfVGJKeVNlYXlTTzlNdTVQVklyYkxqTzZLN0dxWTJ4WnIxVGFqc0lsSUgwUEgtUVdNejZiQWhVVnRkdS1ZYVQ3dFZaclMyX19xYjNMcE0wRng3cHUxZWh5NW1QTFFfTzJMTTFhbjM3LW5wbUVMOWdiazhLb0tJbDAwRFVUV2hHb3hLS0lPbFhhdE5iQ3FIMzJqdy1kdnpnaTJ1Xy1EWnE0d2tHUHZiUzMyV2N4b3Z0OXFpU19vVmg1WEJUUTRJWGhSQm1Lb3VCMlhVaklUZUU0d1pIR1IwVFY1SW9aUl9taHVNOXlfWHR1UkVhOWE1OHJXUTBfZFBCR3QzNkliUjUzNmVKc1lMbEgybkU0M3dnWUxKalp0RlRtN19oYXRjM1VrOEZqOE1zQkhWQzJHU3NLUEc5aHE0dlktU0o5LUVVcTE4MXdhWnBlUElPcGxqelJieG9hU1dWZWlCZ3VpV21NMjFLVWM5NVlxZGo0a0lxQ0lERFlhTEpvQk5IVzdyV0pkakRQMnJjZEE2djgyVXpjRWZtOFJwZWg3ek8tNmpQZW1ZM2QxOElxLUp1N3lnME5hdGEzYVB4SzYxMXl5WVRBbU03M2NhYUo3a0xmMDFid0YyQkJMLWlTOUx2UDh2SE9zZ2l4Z3lyN0gwZG52WEt6VHVvV1JxeE5kWVI4QzkzRGF3UEMtRXpCUWNhZUJ6Vy1tSEt6RkxyVnhZQUhSTU5FbjBCeTJ3VzB3UmhiWHpSUGZyRHVVVkJfVHdqMEE2REMyaWdTdVVYMk1vNUpvQlY3bWEzYlB2ME1RckI4UlMybzQ0M0RjaE9aaS0xMk9oQ1ZKNnlENV8yanVMQWd2SGlsZURCbjF3QlRyLVhGVHBmbWs0ZGpMY2tFTEJkZnNjLXJRUHVCUHBuejNFV1JjRWx1ajlVM3dWZEI5TE1YcUdCQ0JpSGpOR2tQSEpVZHhSSEExV3VmbkV5RVVwMkhOLW1KTzhObFZ4V1lRd2g2QkRHOVhEM2xVWGtqeEVOZ0M4bFVfZjdGNFpGZTk4dWFaa2wtWWszRWc1WFFZTXdLV21DUXhiV0pJa05pRTFaVnk2UmdUWnMxWlZCcmlxUkdBaTZXVDViVWU0dldfTDNpalQyVExiOHlreXNRY1M0aVE3dTVCS3lKajBOVERzVmhFdEpNQUQwVFRJaUxWRlNpUV9td3loWUhqdUktbG5VRU0zWjFka05iVEhuYTFadzB4Nndvb01RWWo1Yk5KRDZTdGF5NkNTeUpEcV8xcnFvbUN5QS0tbkxGemJ1Y2tOTlFrSXdMM1RoQTV2eFFNX0lPT2JDWTJxcVVzcnc4LXJtdm5jV1FyckdkcTdPQ3F5MHlrZ1laemQydHgzNVpmeFNKb044NmQ1VWl2QlBVcndEQWJWMlI5WDc0WUhsdFU1U19fcjdtTHNUdThKYUZIYUlXMWw0aEtielFJbE14UG9mTjAyUzBYTm5mQmZ3OXN3RnhXWWdfcUJfYWhYeUNtOEZTQlNtWk5NUVozRHpaSUhVakN1TjFWS2xmNmNUaUNNVzJZZE50SzBkZ1UzV0V4elo2NjFLbDd4STh3Ulo3MXpnRUNEc3l3R2YyZXZsV1JPbjFQRmgtUzJQanJZWGRMbFFzUjNhS3ExNUhBZXFROTlmLTNtTTBDbURNS0xQaGY0eEExMHh3ZEV2NnBIZnFDTXVXbDNUTU1HYmZNODhUVGRZZHhoMzRWNHF0cW9vXzFGMF9XcTJXVmFhc2VEUFRmVjc3UXBhT0kzVGw3QldxNVJQSG1vUW54MWNKVTZUUl9QVl80dWNrMlN0OTlsZVp2WG16dnlTNjY4dGFzWnhKVTJ2LS10TVpweTJ6UzBtWEpHSlczdXhmVGNHWTdMVURhMFJLNkdUazR2TzNQaDV3Y0FGaVFTdXExTUhnRjhxTHZ0d0RXNVoyUXZMWlJ0dzZYOHFqOVVGVWdhZmROQmgtSkNfRUs3MTQ1SzRtUHpQM2l2LWZqWkVpeVlvN0IzVjJnN1E5bmpNMDB3UDVfa3psYlV2dGtqN0lYeDVoaGpncWVsU0QwdnEwXy1iTkIyTDhPYVBKSFJ5TDRjTHg3aG82THJDVkVJSEFvMTllelNSUjY4OS1tT1l3UnBMcmFxOHBZaWw5dmpPWjcwdkYtckVabk83dWJzb0o4OExpY2N6OEg2RGxMQ1dHYXk2TWFYSjdMbnFPdm5XN0lOaWpnR19INlJxV2xVQXJfbG5BN2ZtRFB1WVc1OUxVV04xMVUyaW90SUx0NVVrTFdZR3dTa2xGT0llTFhFNE9saDAzcTFBOTllQXpRUkRTdkxIZVRxZ1ZON0JhX2hKMWhVSkdYcDBQSlJSSFhBOEg2T0hwZGxESHBuLXZ2WW9pekRtMy1OeEUydXhNS0hYNUktVWlLb3lhT05aQ3pwRlRrMkZ5UzZsVVFja0FteDg1aDFLYzBvUmtfUjExNlBkR1Z0VUpUZ0pFOUxMTnZUTVJIOVJldWs3NTR2WS14cE5TeHBZam9Ga2VneVVqb2xKdzVFVTVTWEs1V2JneDdPbmY2R19BTGtPRTM3alB6LU5TamJvMk1MN0ZabV80a3poMVBnQ2t6enUwUUtBWC1TVVB1SmZMb25SQTVCUTRORWMtdmR4RlBQR3FqNEkwcmt5UTR0YlVJekhDWlBTSGF1MHNPSUI4a0ZHMzQxcG5pczZ5LUpvTFdLcFpXb1Zoa3dGYmhJZkt1amZTMWk0UzViblo1QlJ3OFEydDBXTWZ1MG5ueHJmWkJUMkxybEQzN0pBRWZmenVrVTFmR0RmckVFZlc2QmZ5bDNiUFBmSlpkanJUOFA1Y3BTNWIyVTNYWEtqa1RFTXVjT0dVdzZDeFFDeWNPb1JVRVhJRHFzYzREaWthNHVCbVFlNXFGakZGdWJwN2xUOVZHREc0dnJ3TDhKWWFCeGFrSVl1cFRkSC1wMWQ1enMydk54TG9fMGlGd0RRUGF5ODljZWtkVlFGcmloT2tVQUtIb2JxRUNFb3lxbHlPNFQwOXpHT3B4dVRNUkhWWng5V1RzaS1oS1VxOFRCN2FlMDJBYkluM0ctVnNBM0p1QmV6cWRuVlJ5cnVVOUgxQUR3bGxRQ2tuUVZnTlFkZ1ZkS29mcWs2eFlNMXA5WnpOX2UxeDdDZWNrMXRIbGlFdEFhdHFmZ2pYY0xIeTJHMDdYRW1iREo1MmhCMklQa21vMExhY2NVbF9hUjZJSGh3aDdNMm5IaFRXQzdCMERCZE51eE40NUR2NzlXZlNMUTBQbEhaN1NiSEJfU0x5TEpZdmlqQ1cyRm1saEdnd0ZZVTA3SnBlblNJWUlrQjd0cmdQM3BmYmVnUC1Xa1c4c21rUWhadUxoT25mdzVhcDVHdXhrQ2pYWUhib0RNbGZ4Y1h3NWZpOE9EdER3THVjUzAwNXFnMHNRa0h6QW9NS0QzRlNkYlpjY2I1TXVQRzF3bEY0R1FOUGlfVU54VDRhVmZBVjBtTS04Tm9tdnQtSEFlRXN0MGIxWVIxSENOYnVkYWlNTGdUSUNzMWVyUWdJZmNwTlQ2QUF1Mlo0ZzZsVVdOcnRjZENrTmRrMlJtUzJwMm1pejhvMFR6TjZyNEFhWGdENFdVZTJmSGExb0xGMEs4Vk5lbE5pZW1KNXg3SjZrZWFrdmpSempyM2R5QjZVSEVvVlhTOXdqYkEtVFV1UUdHUXp4cGlWWG42cW1HdVRsX1RzdXdXdmJURWZaQ0xDVi1zandFTWVQWkJuRjlFdlVTbmpTNVNhS2FrM1JCelNWbFdWekY2WmJUUXBGZlhVTWN0elFSa25GX1lwMUwxRHhkT29Gd255THZKVFhzdHZ6RF9JdVJnUkdrM2ctQzdGY1FsWGZOSkFBbjBValA5bG83Tm9EYUlJVV9IaXNXZ0xENXVFOVlYbVcyMmNISjd6a0Rvd1VaMERhN0VuR2xWYUdacmF0Rm9jczJ4d0ZDbXZXVDNMeEMzN1h6T250S21RNG10YTNTc3FmRllHRWdmbzFLS21CM1JQM0o5Qkx6WG9HYkdpYkJuVFVuOUJJWGRfNFFYVjBKcG5NUkpTbmVsY3lMcnNLMDJ5UzYwcDVBeEt4MjJyaVptb0M0WHZtV0FLQkIxM0Z0SUhGZFZ1ZEhBSjIyNFJocUd5WFRPdktNY1psQ3NweHROT1p3LWFYOFdKVXBsV3l2M1FISHJoUWhGVlZGeHVnR0U4ZW9SOF9YaFNuUWcxLWVlc1ZuMmpnN011WWd2UWpVRnRTWlpfemo0Uk1hcjUzZkdvY21VQ3BWV2ZvWGU0Tm9IWmlmZC12VVgyYXN0NExRb055azNKUjBnVEpYdWV0RVM4Zz09)
        CM_CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmdtMmFpRUhVd1pudVM0enViRVNhNUtKNjZMbmdLWjYxSlp2SG1mWmZ2aFFweTJfS2VKY0lZOEZVbDZYSnJsSVJ3THlublkyeEhTSnJRV1pjOHZtQU9HWWlONWc9PQ==)
        CM_PROVISIONING_PROFILE: Encrypted(Z0FBQUFBQmdtMmE2bmNUWVNUeHE5bW1Wc2h3dXJ2ZFlrOTUzWjJCUXFQckZqZ3ZFamdjLUNteW1uY0RxMVh5Zlp0RTJ0RktzblhsSGI4eGtpYThaVk1QRXc5dFZOWG0zd2thNDh6S1ZJQXVTQzRhb09fd3NqbVZuNWxobm1SUjFGOS1kNThNYm1VRm1tUmlGUUFSekZLT2tOa0Zic1dSanA1Y1NEVmJMNWV2a2txcHRMYmxxSE1wRFhaeU9oakJpSC1YSXdDQTU4bUlqaWtZSlBJY1BDTF9uMUlfTldual9yY0pEUVY2dVl0U0pRWlRwTmZ0bWxUWHRuWmRyWE9IbGdxblh1MWpTSlozeUJrT29IVmNmek9BUlJRams5bTZEQkNJY0NDUzBnblZGQnJUVEZPTDJ1azJJNlo4eDlxQzRxakE2WlBpWWVPLUdaWEthczRfbE5QaU5jSTRrVU52MEJrd1pGekN0eW9OVTlfdklTSGdoYW9JdV9xWUJlNkZQbktPbGxHUHYxYXc0MkE2NFphMHRES1puWVo0T1dlQ0E2b0d4clJKRmtmVWZ3S3czZnZ6VWhuelFCbkxsQ0dsY2xjV0R0OGF3a1hXaFNXWTliekRjZWk1WlpfNnFuTWZXVVVXS2ZfeENqRGpyZmhmQ1F0MVNxVjlaRFl2YmVFcTY2aTJOeUVrSjF2WUFsZ3RXc3c0dFJDaWgtM3JnT08xZ240RVJRdFJWRU1PYTJqUnRiV2h2NDh5dHUzRm9iUEl1dkxySGdHT1I0OG4xWHhESmNrTmlac2ltRGxyZFNMYUlpTTNlcmdfV19GT3hOV3BtWlgtYlptc3hWTEtMblE5M2toeGlCdmdoMDdVRWt1V0lreVp0NDFlWnZFR0NxQVlhbVJrOVB2WFcxeUgtcnBaTGxwZHBuYm9SY3hsa1pRNkVicXlmalB0elNJRTlOUG1HeVFMelNXcThXTXNKSjNzbHpoNnNpTTY1WHFjVTliZ0xCYXRQNW9hbGxHTHR0WFRMVjJoRHNYWjY4cHFiZm5RcVdESHdVVkg1MlFEemloMUpHUFJPMEN0dnVzY1ZWQmx3bFNQc0pqV1N5c3BraWN0d3E0ZllicUVxMmppbEFJMWM4ZmItTTFIVTdzbkFvVXUwMEdYQlZDQkhscUl5VWlQcmdPTEdOd3V4b3Z5OUlwU3NqY0U5YnRvRkhNcFZpTWtzVGJZVmRXZU1JQjRSNlZjUkpxN0ZWQldPbTY2eXlyc3VmMjhHV3FBNmFZZzVxY21HaklELUFzYWFBY3dUNFdoR0xVc3pjd1JoSGpvRTJUYWplYWR4Tm1KTlJreUpfMjNEekxYc0NtUUFNbk1rZWYzdFJEdno2d2ZQUUtYNHF3OFFqb1U0WFFwWEVlRksxQlc3V180Q3BORFhjVjlNdlBuak91NW9nQWE0bXUzemQwLXZ3TzJJZmQ4cXc4R2pkNl9TQzFBY0FlUzVuakdnQ2dYNVZDdVpxX2N5UzBycUpJb3Z2QkdmN3U4cUJPQlBnWldQUGY3Q0sxZ3RlX01OMHV3QXkxUjhuMXhHSm43R2pXT1RDOVJpUXc1d0FMYllqRnRNcGVmWHd5ZjA1YlhyMEZxaExpakxXLVdrNDhsR2pLWDB3WTVqRFdySWNzaURCQVJPOE5JTmtlUEJHWnFfbF9YYnJ2YnBGcUNHd3ZxdTNjeUk4M1JTVEs2MkpwZDJyZHRXYy1TNDM0TDkybk5uUXNVTHlVNFVrZG9WVFpBdzNlSkdSLWlyLVJRNFJLSjl3QU5fQVVUZVBhRUdOY2xhdkdTcXQyc0JySjhFeVZmZkk3R3dpLTZLM0o4UXFrcGc1NlFtMkJ6X2E3Y3BGekVmOHJtU3llMnFLSEp6SnpzSkthZXdqZmhWT3FhMjhVOGNJZmhuaXJZRF9oVmJDcTVxR1ZKZXI5Uk8tM2NKMHRWay1oU2MyZTE1aFJlN2ZQeDB2eDM3M041QU1Pem5vZUtOSWVBTXhwSzU0U2Vjbkl2ZVAwNllJSnY0cnlka2VOYWpqdU5KSFdWUnlLUEYyRXYzVFRjTVp6VmRwamktc2xndHljNE8yamg2N3ZmZkhDWkx5Q0tFZnVFbFQ2c1pma1o0Mjh6WW1iNHJHcU1YSVV4TDc3MmlGZk5QYXA4NGJ5YkNBTDdVLWFaU1REVDRMcFFJM2p2VWZwZlF4Y2swWEdnaldaazZHOXZLUnNXX20wQVJwY1pYNHJmNDZoR3pZNG9PWHVjX3hWQ3lEb3Y1bWlnaXlQLWEtMXUtTHFsTEZYem5KLVlmcmRmd1FDTllHUjBHdVhQa1dqNEJyazM0LWtoWUNuMEZyek82VnBWVUNtWWl0LXNWckJCUlhpdm9KUEx3akx5NjZRSTB0WVdyTTkzXzN4X0hibFlsM005eHE5aUtaZERkQk5fSzVkZDJSN2IyRjRRM283WTFad1RTZk1QR2hoMUVrUndXMWtRVU4zck8xSFVIZm9Kc3hwNmVydlpMMzZ1RUI5UVlzbG5Vek1SbEctSEFIVXlCbGNfUnNOSVpSVy1IaWh6MHNQazJXS3JSOVptQnZKNWtrUDNwMDUxZTZzMjBYanhMc2lGOTYtak9sMXQ3OUp4U3BuMWsxeFo0emhyalFZcDNCQWNqLWdiNWxLcGdnWV9KdC1jd2ZtSWgxcnBtTUp4Z25zUjZsSGlVM01rT3d2NEdvdEZobU1VaEJBa0FsMzc5WW5FVHc4bEI1ZThHUjkzeHF1b0x0eUlhNG1uU0k4X051NXA4WTNaSVc0TEk5TTZzblVuSjFJdzdaVkpPdW4tRFd4NHNlVHVlUHRhTE43a09HUEVSWVJfaWlDYTV0MkY0SGJDTXVRYi1mby1wQUNTei16S2Yyb3hkMkRUamNMc1YxMlBpWDI1ZmYzV21KRnFFbElrRFkxTnF6R2MzNWJzZF9hdjRDU1hBQ2FzaENoWlhhWmRhdXI5d011OUl3cWhQU2V0UUZtemdZUDVJdWI4UVRiOURjcVFJODRYX1E4S1BwZkhIaWdhdFpXZEJINlhrV01XTEhLS1hFOTFQOXNrdnU5YUVYWGxpLURLVWg2R0NiMGRTNXdCMWM5S05BdEtOWTNqU1ljLUlJR1hqQXRLM3N3X2doZWN2SHRLUzR0dml4NFR4ZHdRc0lfUkNYaXhqMjFYWU9Pd2VHNEp1Z21mRWt3cEpxdXROZnVqbHZCNnljRkxWNnN0SEdsMEZIYURXUUJJVmxqZmFRRnhkWEVxa1lxemN2X1VkOVRLX1dNdFpJTFpKUkNfNWJsNHBIdDU4MVVCQkMwWlZCY2k1TU5MdHJrSTJxaHl2aWJNUWt0eUhPVGRyUjh6R2NSYlRYOFNyc1RDTlhjNE1oc01HbXV6dFg3cVBfS1NGVEpYWjZ0UXlyMjdnRFlyT3c5ZXVNNFZPTk1VbEhQaUpDbTd4THRpSWlVZjRuSDJrUHlBUUlGSFlWeDR0cEk3NUtRMHVDR2lrZzctbkkwd3NId2lzb1FnRkpsSEZKMEVKWDBBWk11WE5tRlV3LUx1dTNYY1NuaVlVdFRHVDh2OERfZWMwOGd4NWZSa2kxZEd5TW1tX3gtVzZRa0dmRmFxMUxYWHpGdDJWaTR5TlVmWG1ZOGVBR2RlOUV0aVU3dnNSLXItYUMyV2R2WE94d3pKeTNlNUpwQjNiQThkdWY3Tll0dUlOWHQtTXZEMnRXVU9jeTl1QVIzblpSa0Y0Ym5CU1FleVpQOHVOZHBIeHJEMTlvRmRJZHgtSzJXUFF4ZWpBSWJnTF9KR0xobkdNRzdzZktWZ2NZWUxncE1NSGpKUy10aVNKaGdsRWpxdk4xd0ZpeFNDTWFFV3c1cTRPVTh5ZXlDOVZ3WlV2bnUybmFRa3J1Si1mYVkxTzByNnJTd2ZITXM0RktVMjlYdW90Q0ZHUFBzYVJ3cEJ5NlVZVmp5aF8wcXhzVV83OWFMUzdEQ25EN3luaWZVX056MktkS0lTSVE1NjR5ZkRnbFo3ZUtsQ3JXbXdPeWZOMlpKeldxdm91UGU0eU8yZG9tdlR5MXU5TzUzcnFrOWxtTVVFM1JRMVNpeXRJRC04QTJ4NlNFejZyYlF2VEhyX3BINENYdzNiRU5fTzZSbXNGTkN2R3hPb1cybXlPdjRlMzlQbzdhdnlxUTlZbmtMZXFrSkZ6VnF3U2piN2EzM1BCbkNmaDllMjJNUUxTYmJwRHQtOXJFNF9rZHByWHNndnZibnQ5Q2N6c1ZHclhWWkFWWXZMTzgzQXZ5akhub3RwMHZVYUdGdVIxRkM0UnBGUkdOS3gwbWJpNVdsQllFSWRDODdDWHctWVl0S0xzcmE3MUt0dUJNVUJyclJzcWEyaEpaeG84aFZyTS12MTU3ZnlKQjNoTkd4QUtIbXVYb0RxVU5Xd1cybk5zSGhqN1BNLWxSbUJjR1plVVRzLUNodHZFMjNtYWV1QV9hSDVoVTBBX1d0bU4zRTNxLWFaZFZaNEZLWjVKS081a3FUQ3RvdWVFT2doajItcGxyVjBxS0tKT0hsWk42SEdEQlFuRkpqM3F4bGRlZ1o5NDhzRk85MERKQU5TT2FGcWljeHJNTE5COXRyQjlHRnBleXNVMUc2SnJYZ3h2UkRrS18xekhSNG9ZZzdSbTM1cjMxS2lEVmJZV3MxTlo0VTlKNEc3WWU1dXRJd21IbXdzWW1OY3RpZTYwODlFSlA0U3k0WEQwWHgtYjF0eENMOHF6dkZNQWVVelh6UlVpdDV5TUtVYzJyVnZOQXpOUHVWM0dPb3JXbEpHSE1qbWxIVVBqaDh0NXdFM1dtSTRWVF9lWVdKQ1E4N3R1WFJtSjF4MXZkWm9sM2ZWSUlSNTJ6NGEzOU9vWDF5aF9SalFJb1NEMWlzanZpeVVabEduZDhJNW1TbFZNYkpncGM1ZzB1c0RQemNWV3FPNmxhVjVOUjNXX1Fhbk9zbUtxMVV4Vk80RllTdVQwbEc0bElXWTNWMFRZcnpnNmRQVU9oc0JtbWVydUNxdm5SQ2FUTkhIS2xSVDFFcUQ4NHYtcFlNeERoc1R5dlN6TUVRWWQyZWZVZHh6Q1NwSGdOMGQyaWRvVFJ5Zm11RWNjVWFhMzhhZHgybGpoTnBaZmdHejR5cTlNX0c4eDJ3cVQyVVhwYTlrSHI3RlJfdGw4ZklaekJqOUxqMFhvTC1oM0JwUDZTNXp2OV9FWF93V1V2Y0YyTWhiSTN4SzNieE5MMFVncGFzN0ZWNE9CZnFQUWUySTlDek1FQVB0NUdZRjhDQXI0d1RONkVPVnhsRUFPWHVlUmVBQmdDdGgzS1h1Um9leDBqcWpuZmJWUjl1bElNU29UNXRhZXNRcTN2VGlzTlVmNTJVSGx0eFlzTE0tTWFHcjRYT1JYNE1CMzlTVUpPN3Q5QkpZc0czYV9FS0Q5U3F2cHJva2pWeVluZzJpZmpLcTRqdUNQanAwZjQwTmM0eFdydFNua1JXYmdCSlJ0WjdLT3JTVS1hY0RSRXFjUTJoeUx4ZDhHdzhPXzJ6SUxLRTM2Zm9yZDBjbUZJVFZiNm41THpQejVxTGtSeERYQWZfaUxlTk1Ja053SmJhVENET2NYSTZndm5qS1FaNU42a05RUkVaNndpR3dGMUFmRVZyM1VKMUVaUndIZ3VUSWxjOGFPb3JCWTlPNlZKMk8zc29IUjd2eTZRXzFKa1VyYWw4MlZaUWcwRjFGU3NTYmFNQlllTERDSGZ2Wmk0dnkwREVYOFZVUGJtbzYyc3QwZFhuTVRJMG5IVnZPSGt1TWR0dmFORHp1QmpjVEJyOE9Jcmg5UDJ5Y1RGVEdiRXl6OXE5UTVZVkYzWVFIUGxzbjJ2eV9VQ3U0LS16czNURkRGdTl5dkdfUWp1aHEzcWM1cnJWZ2gwM2xXZUgtemRINTVuV0hKcG4ycXZuX0dhdTlldFZQanQzXzUzSGgzOTQwZVJCMFV0WFFuLVM0ZVAzZjNVbWZjMEtRWmYteUd0aktHUGU5VXlLUl95TnlVcG1TeE1TdHVRQ1Z4WW45eDk5YjJlR3dtaG5qZjdrT09NVE4wQXJVeVVrOWJjSlJYVjdXRkktUDRPT0xiUG5GRUo0SU56Tm1NUVZzR29nZThIQW9KdFdIZ0gyaEpOQTFrcVBDRkd4Z3VuM195Qk1aRXVjWlUyME1qcElaWlI2Mk13a1dtWHQ1SEs0TVozYkpNQ3dhckREaHFWQkd0aTdZVnVtU3c4WTdTSjc2ZmM4eFdnZzhSbWNkb0VjY1Y4ZFBRdkJYaGVXQ1JteUhqaTg2MXExd2Ruc3h1bTE5VVNYQTVFZUZRbnVOTWd0NkVGRE9fb0hNdVVCQjRPT1dUUWVzSVM3SC0yOHBhWHpzbk9vZDN4MUpXUlhaNjZYRlZvNWNyZVplYmpuR2RteXFDdFZWV1FFVUU3TGJxdDg5QlNVc1FUdnZVSkc0VXE2SVpkOXpDVjFncnBGRVNnS0dZME5zRDlhZWhjeTJ6bXpxTU1vSmpxaEVQMk5NeXhOaG1BNGNoeXpYMEZuZDZqNS01Y3FmNi1mZEswYWRVaE1tQzg3T0lWTEJaT0ZMRFdlSUFkNjVlNjJ1ZzBKcUxGX0o1RjdzeGtXWEUzMUhtNXFMNmJPZV83MXUtUmd0VWwzUHUyYXpXOVNuaVlGMWFHSWR2MWY3RDlGUTNwN0RCZ0NJODRqWmxSa0pPdXpLUmsxSmh0djUybVliNFpsTVBBSFM1RXZvYjg0WHpJUG5CNFk1eU1vcXVGaWoyZktYeE9hNEVtRG1BWlJaWk5Cc2tpQk5UbjREUFFqUlFaTE9BckpuZjRKcXBqYVo5d3luOC1YVVg5cE4wYUZEb0d1SGl0THplVVZ0WUNBY3kyWFEtaUZ4MnV3SUdFWWtBXzVTZHhCWk9ZUHducndLaTBxR29jWWxsaGZGR1hucmNUaURzU0xmTFNsdGZqblpoUWVHbDNfU2FoeUFTT2E3LUIwdFlNTUtJbHJXVTJpQ2tkVVRZN3luUWV5Rmw0NjlpcTAwSTBGVGNQcVJsMlJfM3huOGV3WUdYeno4R3dfQWUxODZtalRKTks5S1NxQll1bnJoMnVQa2FKRnQtVlRxYnhrSU96dXMxMDNXcjRNSDVMRVlNN3oxZ0ZRbGVNY0RaXzRHMTZSS1lQOVdraWRrb3E0N1N2Q0JxS1B2a0ctNDVsLTdCM1VhZV9HTXdkOFFzUDh0czNNVUZyeTN5ZUhvc051TDEzZi1QTERRYzhDaTBpTURQQ3JNQTc2NWNjZWk0b0pyRXhHUjhPZXh1NVR6R094Qk5OZTNPU2NoVUVQbjk4aDQ1NS1qMU9fZ3VHWHlGa3VzYUZZRFJkdTNUQUlwTjB2bzU2Qnh1UmNoQ1RRWWRESXloVXFfeWJXZmFUZU5IaVJsU1dBNFpLT3g1RXlIT0VyQUJuYkFSandocWVkSGg1UXpkSkxXaHJRaDlwZVVLNmt6RnZFckNfaFJRak8xRURmSU5Sek1Zak5kNHNXVmZUUlh6UXBIQ19uMUhGNEdIYzQzNFhZWDExb2lwZzJUaFFFeWRoLW5FMDJPeUJ4ZW1yLUZkVlVfRi1KWGdBbUh2dlYxNWdWUlVIdWl5M1JoZGE3Z0pmM2ZhWWNhLUFDMnlsYXBhYXRHOHYwSDJBRl9vYWUyTzY1ZEV3NkFwWFJORTZZWjNaaFRwMmRPaGxyLVM0N0NYSkRCMVJxeVBVQ2tSTlNUWi1HeUpmc2hGMVlDbDd6Q002UnFGUzVSZWNDSWxQbDFSZnE2ZjNfbEVqQS1tRFRMNm82NGpYXzNMMVB3YUJXLWhWRFlDeDlaTlg0ZkVhWGlGY1M1SGtPTTdleHRfa25RZ3Q2bEtVZW80UXQ2R3pfUVdYXzJNVE5OMGFDM1diNkdUNkczNEg3dnZzcXBtS3hpQ0pXY0h6YlhUQVNCLTcwYXRpVmZzNE14Zy1PY0hEaVpoX0R2eWRyOW05TFN2YzZYMERYcUlKVlZHUzRmb1h4RXl6QUlRWGVfMzlJZ1ZUYkJkYVNBblU1Mk1ZUnFoOU16NmN1S1lTUElmWElhNmRjMEVqU01mVXF0VmlMS3hMcG12VXFXQmhPb19lLUNkaXotMkpxWklYdXJ0S2JjUWNfTS1fSC05ZmM3TmJiYVVyVFAyZUFzeXlaazBNMlZJUFZfRGhQSDJHOEtNanBYbi1kWDVfT2JIQlpGTElySzBtOGZJVEF1b2IzeHRJRFBUV094aUtUdG5vMkR1Y1V2X3g1U1BkZUJuaEJBR3hRRm5XNVJGeC1KQUhhbnJ2TV9weUVmQzd3V3RVYmc4VWdVcGNDUk5sYWNiMGUxVjlzclQzcjNLUy1QN3FjWGx4TFFzcTVKUWJQdmV3VjNGeFZxTmVtQXVVUXRmR1BzZGVoSFhmUXF6MWplOTlhVjZLd194MlBLWFZiMl9VY0xmMkNzT3NxekJSU081Q3RLSUVJMFBEbENWc25xSFUwYnVPN0dLMTF0MzZ6TGdLbFRjaTd1TXpnYkVEVzNnZTloLXVnVnRrODNLSUw3YzQxMmE4b01mZV85c3NqR1ByWFFDdDNTMklRMEpacHZoNHVWTTBPaVVFWHpYeG1mTmtVbmxZZUlyQWhMbkFERWFZVHpsQnE4RVA4X2NqSTFFUDFvZnNTVVZhVHk4Q2l2bEZ5UlhVVW9Wa2k2Ni14RTlDQ1l4dUlobk1VRGp0UkN1ZmxRb2R6UzVyRTc4Z1VKYTZZcGxOZUtlQlJDSW5MREp5amV0NkhzS0dRMWJ2bG1Nci1TdTUzUmZBMFJFMl9ZWlJkQW55WFJnekNuYmdVdGNLZUtfWHBSMW5rYWxxazc3TVVjZnVGTVRXRE9ZdVotaEVNNDdnNVJ3akVudGMzS2kxVUc3SUtYZVc0Y1BFUDlCVjk3OWhYTGJ6RUhSc1ZGWFNxcEhxbUd1M3pEdjBudU44OWNISERfTjdiejF3NmhPUGNGdlZ0OTk1eEhWUnJxeEZOczBsVWRpeVh5c2lJa2JMUDBlM0xWNEQyQVRMb09nVUZZQVVEbmlNSnJfcjNnVVktdENqcXJpT0ROajU2cWQ0aUdGa2JoRmFMSFRfS2UzWUdfX0dpVzBFY2JkZ1RjT1IyZ0NNZUVuYk9wNzZta2t6VTBmTnRfOGY5WlI2MFBIazlhZDM5Zk5sbDZSamx0WTNldU9GS1hua002VzR3NTJPbF9pX3gxc241dlhCazhVN2h2U2dxaVFZcThDQkJyR09YVEduUGNUZGZ6QWFKeUNVb1hfLWd3b1RYVHJjLV9XNHpMT1Jncnk3am9GWDVRTFZ1MVJORmRxWHdsTVQ5cHozdjVnSFJONHZocmZrOXB1TVgxSGd1ZTBqaEFPZW5pVUtFZ3ZiRGZYM256aE9tMEJZbVZ0V3JRMFFMdHdYc1ozano4OWFjaFgxMWRhcnhuWnlkZGJyTE5UTHlIeGsxdXZsd05ULVRNY093ZE5PX2tVSU10Ulo3MVplUzZmZVNaUkRuOFZXYWlsbDYyOWRYc2l1UEEyLUVIWGxoc2ZDcnN6eU1FMWpocnl6WTF2YkNUaF9LOWQzc0JGYkVCQnBfclVMc2VkWTZ4cGgzT3ltMTNPVlNad0tzVFJpYnZYN2dnTkVVMkN2UVd2NlRCVld6OXg2eFZKN3p6ZmpTa2tUWEtkVEU4Qlk3RGJKVXlsV25RUWQwQXIxLWNEVFR1Wm5HR1AwUFBsZjJCTVo1NHh1OGRnVUNRTGNPYjcxRHFEWHpiWnBvR3ZEZUUzY2N5RWZoNDNkQVJkY010WGlXQ05PM2ctZVhlcUJNYUJEcGJfQkhWOFJsVnFXN1dHd3U5dDhvWnpBejVRck8tdUtCNWV1akhkODRwOGV4djZEbXJkQnFjZDV6YWpLYWZRcVNYQ1BJLWxnWVROZWVfc3ZJVmxWNXNieFJXVUM4SkF2aHlmZFVZRlB5Q1h6Mlk0aXN0dnpBRVpJU1dmN0p5WDZvOWUwb2V5LXBnOUx5d2ZySEEzajZvdGg2ajRUSHZ5d3NOeDFzT2xCRFZ1MEcydnRYdGpud2NOUGwySExvT05UMFo3X19jM1p4NkZVMmtDVnFlRTNEYkxyaTRQQkptQkc0S3AtSXVELWNwblRJVXJLdkVmWG9lSWpVN3VOV2h6cFliM2VOSVd3RjNsc1N6blR1eXVxbEkxZVVaeVA0aWNITW1UaVhQcWZGVjR6WmZPNjJfd3NaZkk5MmJVVGVZQVo3YVpEdlVZLTJTVDljSUNyQ3JnMU9nSXhWQ0dtNXN1ZHpvUHhsU1Etb19qYXRZUWk0VWJrTUFZMk55Um5tc2hhZi10a3J3TERFREdxSzk3MDdtWUl3czVLTUVlYXQwX2xoTU42aFpGT0ZuWXliTS1PSm9mMmVoNmY1eVJHSGZ0YjVQXzV0aDdCQmt4aEltTWdyd0x3WEp2RlFjakQ4djhhcG9uOTduSVZfbHkxMjZiWjNvc1lHVm5IMjlxMGZKdmVUWHFsZTdjZ19SclNtNmN3ZGRnZWtza0xRa21kYURfdEYyVGNrdUZlclBVZ1VsLURBZzZQNGtoODc1aWxCblZKcE9tUDV3UDIybWZrSndYcXdPQmxlbmN2YllQWXl5OVZUT2lzSmNjRmtmRENEc3NKVFhaUkk2cTdmeEh5WVZBSnpsWi00R1hZU2FJTEhnTE5kNWtGbEtDNDJBNkpLZGZSWkxnZ1Q2RlR3b0I0Q1ozOUYxQl9BMzRtNWgwRlBSRnNtaHVZNlRlNFg5clFEbW9FRkVJdjZkZWdPUDJPT0dPcVJvLWdVUDRjX0NuMjVSZmlvRXd6eVlpVlJaS1RSOVVCTl9VcDFBblZiZ3dTSWF5bGd6a1U2SXlKT1RMbUpsTElwZWNyTGpzRldxLWlBUmlzeVhZYUxQc3BHX3NzU3lKN1o3RjBoc1VGVk9XX18yb1Uzc2dFaGZtcXJsSVhUb1J1UjBDTWQ5a29ZODVlUU5CZWZEZzlkRlU4b216WDhxM0wyMUZiNTlONVk5c29QcHUzWjc2UUVyWW9ENTFnY2NoMzNGMllTemQtV085OHYxU3VqOHAydmFUV0JRUkp5R3EyakVDVVJLMWZhcEUwOVhnQXVHam1wbWc5UU9ILUJ5SC01elFNQTBjTk5HREtSTTE4c3FhaWlyaEV0N25mQjNJdnJsQkd6d0wydU1vaE9kbnJNX1RWXzZkX3FSMTMxRGI0bi1fZ3FqV180NHRjNlFiczhwZF9SRkMzMkpxSWdSdUYyVDV2cldpb2JhaXl3ellsX2dJcWtDc1VqR1BuV00tMVRsb2RfdmQ4SW13WmlWRkl6cmp5U29LWFYxajVlRnFDQUtodGRyd0VBY3JGbUFfNktFdHBwVmZ0UWREZEVFMGI4aDQxUU9LMkt5RFMzRU1WUHU3aVBWVDUwVm5ISWc5TDhhOHZmSjVOTVlyNFZPOEFIZHVzVzJ3ZnJaSXlsam5XdUJkX0JHLUwzMVRMaXFsQkppdXhqLUxQSG1vam5lVjhTRUxzTU9iUk1SSXZTRnBkODNpSVlJVU9RdE9NaHRVazQ2bzJtY0JKc0NSaDRwU0Y4RE1ac2tSVm8wTU5mVW1ib2o0RXo3QURRZEl6WTVzNWVHYkQ0SnBpcndOWGhLaTlvX3dzdUVzbDdkQzYwSGlsVTVFVkN5YjlzMWRvOUdPYTRCZThJTUVycjNCWGtsWElWSEJMWDFaZk5sa3ZsOWMyTG5idTh0RzNLcVl3dElwc3lPZzJBT0RUeXhyVlRQZ0JYNXFTMlhMTjhGUEFSUC1hSWRYUTRQRHJpUnFkQWswNFJQSjhuNFpfZE13Y2FIRnR5UENIVGpLWVNQc3ZhMExPNHNXN21UdWpwU1NKQ1AzN0EtSUwxNV82bFpCN005aFE5dVdBSU5YdDJRbU5wRFNkd2NiMHpveV90TmJxdS1IbXhhYnhTUi1BT3ZsMmlaaXVBTmNsSXcyQ3R4NnJ4OHAtWG9rR2FqbEI3QVFuT2NGNGQwRTk5MlFHUDdjX1pMSWxVOEtJaGVPc0tTbFpYZ25zZ1lUVkVwelBUWVBHZklLcHJYRTgwWFhwSVJDSnBnV3hiLUF4dEpCMmMxOFNXVjFVOG9CTmZBazc4VWVoeU9nYnFJd0tCQ3d5REoxWHE5bTliS3E0eWI0MElaTDlINVlYRVdPbk9HdW5tMFl2WTNSRXdsTzRTOWlTYk5PbG9vZGdQTS1IYVZiVzI4bUJUd1JydTRIYk52d3JsRjgyb013N0hlV2hsU3hQOG9YVXRYZTNqZE41R3A4OEg3MHJ1QVV2U0liS1FTTi1fWDg1a1ZsSl9hX0sxZGxfREc3T1NMZU1xNFFCTFA0TG5PU3pYRng4aEFwR3hFLXkzR21TYTRhQ3hQRldrQUh0NlhneXlnZXhWSmpRY2NubEMza2ZQRUQ3Sm81UzFpczk1bm5POHRFSXNTVXEyeWg0enpxSkxqb2Vzazl6Z2RoVzRMN1h0UmV4QUQtNjdJdmxsSVNvRnpwZUJpRW54REpHQ2pJb3ptWW1PQXUya1pJbll1d0RMSXpFUm5YNFZmalppcXpZZi1HY05TR3g4anNiQVZPZkJCOWlabFpLMV95cmx3MzB2WEFlVkF5cEVINndKcHhjVlBtaVRQRUx5V2ZOaWxoamNTb0tEaHJ5cFBKTTlVXzN0VzZITjBrYmJXMndlUnRqeTFMX08yeEtXUmFoS2FHSDJYdGY3T1VDSWhnTXUtb1FVVVhYVTc3YzJRclEyQVlkTG9wTDZ6Y1pIeWNtZlRQOTRBWlhINVdhTDU3dWVTcnZ3a1M0dlJGSXRoblI4cGxUeXFmM3ZSSzdTeTVpTHVKV25kT0FlM3NZQzlNaGFZME9WYWw0ZlMta2tGQmJsLUFkRmJDckk1cllYSWtfb0FVb0JJeHFOakxrR3ZQTFpGMkVuNkc2bmFQVkxuN0hFd1Z6SF91VGVuZFdUV3FtQnIyUDZXdTVBeUNBRERXVU16ZEd6bnBYOF9MQXA1aVBya3hQMjljSnBMM2VBOWpzNG8zX2VOM2ZiWnMtenpPN0xvXzBubk1XZDc4dmVDUC1rRGFqXzZHdXVKMlF0ODNwTWFsTG1LUjBpMHMxNXI5R0FSUFVsOXhqcHY4U1RvX29YeE1hMGZoeFZyRmMyOGY0U2RYNXZXQkg2N0puY3lUc1BQNnhBTkx2a1poZXlya3ZBRVZNOXdNNlFvZzh4X2NEQW9kaktPZkw3SVpDdEsyRFBDSE5jMjV4bG5pVXo4ZmdhQVpGek5MOGluWjNYWUZmNkhGc3p2bjR2TDMzLU1zS2tpMjM1TjE4eHFCb2FSRThubThxaUhHV3BPc1V4S1ZLY1czaFJ0V19TMlRzU3N6RkRnWmZXRGNyeXpLdl8tR0NheTRDRVJIUHR2bGswakVIMXNHYmc4MXpHc0E2Sk9nU1NyMnNNWDRTUktGUDdUb1NFMmlSNldwVGlzeXZyQTBIWmplbWN2cmN1QXBuWEVWa1p4R2tEMFJqX2lQckU4Q2kwV3daSEZPb0U4X1pSRDBpUVZjUHV2cFJ2dkJDTk5rZWZ3SFJiS0tuVDdfMlAtWnJGYldZRGJoT0JDVzlKSy1iMWxyQ2xiUXpRdHFDd0hGdXFVc3Y2Q2p2N29YZmp2LVZrYTUtc1RGZC1QM3h3V3ZMSHkzQXZfYndrbUJhTVpuc2lNa2Q1V0dkS09hS0FYcjBldmN3UXNmTWJROGpOSzhEUWZUb0h0UU9XeExCRVpYU1ZqZjRrRjRNTWtCTXVaZkJRYWZ5MkUzcEN5aFhDYkd3UWRhLXNicVJ4a2dDMGJsWTBqNnhqeHJEQjZQeDBVcy1mb3d1VER0ZzZjLWtIVzJmakx2aEFXTEd2QUMzY1FWUjZsVWdOcTBTOE1HcW05d3lsZHBBSlVxTy11ZHp4aWQyZkVpMjM1YnZXY2xGVlFuM0RjSW0zdWRpdl9fUGFoRjhlM1ZxLWwtdzdoQ2EzNzVXdUpRUGo2bGxGaGUyNjdma3VhZ2d4SmJaeHBlS3RlSW5EZk1EN1pvV25FeHZGS1lac1NIdHlhZEF4b1JyTDFJdC1Ga0QyNnNHOUpMT1J1SkZWbU1sdE91dnA0QmdNaV9neksxaWptOHdLbG45NHNJYTQzWWRqU0tlajlUUW8zZ2Z4NGpUUGQ2dDd6STl4Nl9QUmprWWdHSV9uR3Y2LWpfeGNnMG5JWmplVEFuYjlGbDBtZlFVejctM1h3VFBzZ1RCX05iZXM1NHFuV1pUWE1odlJWOXB4X0RjRVczMzJNekxhRnJSVUN2UUVLb3hxY2dya2RpUzZ6cmJxQk0xbzJTVjFGWk1xYlQ1WnJBTk4zd0doWm9FYld4TjhHRnR5YnhlUzFQaG4tNTVVeVB1MmpqMVlMdXdJbTFaQUhWZlJlSE9RSVBFdFotQ3M0c0o2Y0hqYjJfRG1XN1Atd2l4UlRKYjdHenc3UnhsMjU5V0VRTm82TGUzT2VOc1QtMktXcGc2NWlldURkZThGSHZiLUZsV2lQckpEb19Nd0pLM0xXLVFpV1paZ1owME1YcU9tT0JUQ2JvX3dYN1VKcktQb2Z4YjFPLXU0SWo5M1RxdUtqZ0FNNVdfM3VXbmhObEtiY3EySGFfcWZfbk1pMGU4eVBuZ3JhRUkySHBfdU85ejQ1SFNPd3pvMDhUTW0xN0tZNnpXNDlWLVFUTWJpRGg3V0NtQ3V6cF9Kb05fcVU1Z212XzIzUEtjZ3RhbkR6SnJjYXp2ejRIMGd4UWRVNkJldXo4WnBWbjVzM244UW1NbnBwWVBNSlV4a3Mwclc4dDg4bi1jM2ZpSTVBUFFtNHZBTVVtN1UzLWZzd0Jaa19LQmFfUjlRdWNTbjREZ0NCRHNhSEVSUHUwT3Q0VmsyYmxqZ2J0dGZZSlo4X2p0cWZaazNTZl92cTZNYnowdlJ1X01VVlYxOFY0R0lfYktkaUxKcUstUXZrZkViUXUxWk8tejRGaG1UYTQ0bFh6Wl9PakpwTzNtNF8wZzVMdG1wMFI4b0plRjFPUUp5MnF4b0luVFRsZmhYQWxXenNIYk9BMTM4T1ktZnV0Z3htOW50ZDRydTA2M01QWjFhODJWamo5WkxjSk1QVWZfVmw5QzVTak4yN2pNc1lVbHpNTGQ0YUk5WEJOZlM0cU9wZnhGQkRLWFJSMHEzelA0ZmhkcXlCLUl4VzFxVnJ6VTdxRkNjUVNBMmxfakFOM09RaHZPZDRaTVZTbTVfUFotV0RONl83aDNmRnNnSl9UMWRyb2twWUtLbWVNWC16clFwbGdKM1dTUXVnVEJxSFB6NndiNmZwVEd2ZjAta0ItRmtKeVNuanRlWVpyOW93VGw5aHhoTjk0WGdaV2FNZW5fa1pCTG5qM0FzZl90TGJ4bGZPNk0zcVktTUpCZmpQcGtTMmpIN2hPOWJLSzUtNTJHbklVelZoako5MkR1ZDRrWjI0bTZWYTZTNTlyamwxSndjUGU3UjdSMGQtX0xfODRubWhMUlFKRWRYS1U1X0hUMG1XbEZXMFo4MVpub1RTN0U5YXJoNjNlbW5CbzVTWW1rMlNXN1RhLS02dUI1M3FvSWVSc2NMeHlveTJSNUN6aEhwaVliWUZTN3l6UGREOW00a25yTS1xcEVvYWRGa3NIUENDcXJ1ZGRFc0FzamQ0ODlabVBjRFlabVY3Vl95QV9MU3oyMFAwYjQ2T1VqbUNCdWRtRDlHN1RaMmJxNGEyTGJFRDFIRFltclo5RkVSVmJ0VzVQOFJMNFRZRmlGNDhTalRHS0xjVVp3VHJJdE5zUFdkLXhGendIakV4dVRCMEwyLS13SDRRZFhCb3dSaDFiMmR6cWhrOHdrc2x2dFpoWTNaLWw1Rnp3b1RtMXM0NWlFX2xwR2k5dFlNOGhmdFVlYmxZT3B6enl4VmtFYzdwc3JiREljYWlLV180OUFfWVN6cGw5bDRtN25uMWlnMloxOTVBenpGN2xlNW8xaGxBUkNVdDZSaDZjTGdNYmtjSHBCMUhPLURGaENyWUJrYVNVNmFyVmdxRjZ3eGgyakY3Y0cybm02YldtdFFRNkJDR0ZFWV9TM3JVWjJEbUxDNnRYbE9NcHJ6VHZwT25UOWhjTHVEYW1ScU45ZGlyZTJJcV9IYy1NTGd2RmFHdTBRdGRwQngzUFBheTBhOVM4SlZtWlVtMmJVNVRsSGhVLVlhS0FkNXJJRHlSNHZkb20xTURQeDhSS2stR3p2dERvODRVR2lOVFlFbnlaN1FNWUw2V09xUU5vc3FJNVZla1U1T21WX0w5U0laYjNxeVJTUkFaYl9LWFRfNnlFOFpHRWVJcE9RRE43UXl1bk9ScEctTmdnVVFPeFRHSTdNV1VDWkpMWjZ1akF5dS1jVzBacU91djBFM3Y1enYtLUphY0VKSEVkVEFvTVEwWkxVY1ZOODZrUlRBTEpkaGRFMnk1Q2pYZzdCVkpIdUFnZE5pdEthRFNHbGtfeUJlUWlhcUpWWTZtSmo3eld2bm1CN1FBUVhaY1lIWlpmNXByc3BMVXhrZ29hRC1wLW5EVGpGZnpRbXFFOHVRNkZhbUNudENxTzZVZ2FJY1B4REJjTXVHdUlTRmtJN2lzandkbXN1Uk95ejNyNldHYnRzY3pVV2Q2UDVlZVhCdGY1NmFiOUx6M2pyMmpfSVRpSXZrdmF6bmdBRGxLUHBXZHpuYXFyQUFxYkswVGE0eFpvaEZxdWNOTy1HVmMwQ2xBZDFYTDBKTW5wby1lNzhwbl9aYlFVS2NpUlNtS1VxTTB5SWpDcHRyMEpBaXB4YnRBMUl6eTN3YTZmVEtLZG0xOUh2OU16QXJnN0NHV3QwT1FmSHZnb21NaXJiNGFjbHBkX2w0TDBWWTdKcXZuQlVoR0VtMWkxWFBQY1lUd3plWTJELXBQUVh6dnp0WVVmWFUwbzRFUXlGdV9jNDN2R2NQa3ZrVUU4bGR4ZlNaMVFQcGZCSjA1cXRjS2p0ME85cUNMZ1Qxekg3MWFHOTA0T3VLeDlBQmJSekVkMHhBVFN5SU4tLTEtVjM3TVgzZGtHcFdpekRidlFMbEZPOEsxXzFfNWcxOVowX3BoSjYxNVBiZjJCMUdjYmZuS2ZscDNUb0k3OXI0TEZOYVBQN3hiZDhMdWN0Z1YxYmI5S281UHdKY2dHd0d2Q3RVVnhsaVlPWHhmclcwd0JzUlBBUVJSRnQ2LUI2V3JQVkhNeENHZnpQMmpsV1pMTENWbHU0SHNuZmMtQWhsMEd5ZDEzWmd5OVpQR3I2WTBpNkF6S0JCamlCMFNNN1ZxM21RZ2IzczkxZl95Sl91MmhITlEyOVdLc0YxVEZTeHJJemZXa0p0X1N0U29DQU5Fc3RtQ3hZRW9hanFaM2d2dlBNU1g1WnA0VG1uWVViSUd2bmppLVVkaWNqQVd6TUV2MzFad2l6OWZQR2hyblZMaldSUG80UTlncUpRRVdVSndmVHZ4LWpEdURKZktzYlhWMXJVM3BEUUZFanJ6WWtfZ2ZhWkk2N2dRNVlIZGUyRG5JdjFFSVUtTXc2YTJaLUthN3ItUjhxbV8zejI3Q2FtUmgwQU5HNzlDN2tBYTBWRWlxaUc3M1F5SGdIUElGZTJQQmxtU2lMS0VnRE80V2ZTWTJwLXpNMW1BRzdfdFExYjZuX01FY05XbFZTWmNueHBTYkJ5NHY1VTFiN1lza3dTQUNiSnAxeERyMGg0U1V4cjlGMFU0Sjc3Y0Nad1NCZUxzdHdoOVlxeThyNXozYmJpWHlqVFZsbVphWkZ2c1Fid3Q4Z3ZxVDdONy1YSDgyemI3TWdIUzh5UGU1U3VtQnhRaWRZaVNqZmJ4M0pzTWxGXzNmZzc3SjNqNWFtd2x1UUVZZHlPeGh1X1doOUdWVmhnbmhQdXZubXFUQkFBZW5GUUlBTEtWdU9BWTlIUl90T1JId28xbWFrNUs2eWljd3drcEdSUndtUkZQX1BySFhKRlZhVml1eU8tdWprR296cHBRYmxORDZSbjFudWZXbDcwckFDR0hXRV9vYlI4ZTZramZ3WGl4QllHY3FqbnFWSWZsUXFPdll4aTBMR0pXZ0NBPT0=)
      xcode: latest
      cocoapods: default
    scripts:
      - keychain initialize
      - |
        # set up provisioning profiles
        PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
        mkdir -p "$PROFILES_HOME"
        PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
        echo ${CM_PROVISIONING_PROFILE} | base64 --decode > $PROFILE_PATH
        echo "Saved provisioning profile $PROFILE_PATH"
      - |
        # set up signing certificate
        echo $CM_CERTIFICATE | base64 --decode > /tmp/certificate.p12
        keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $CM_CERTIFICATE_PASSWORD
      - |
        # run tests
        xcodebuild \
        -project "BMI Calculator.xcodeproj" \
        -scheme "BMI Calculator" \
        -sdk iphonesimulator \
        -destination 'platform=iOS Simulator,name=iPhone 12,OS=14.1' \
        clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - |
        # build ipa
        xcode-project use-profiles
        xcode-project build-ipa --project "BMI Calculator.xcodeproj" --scheme "BMI Calculator"
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
    publishing:
      email:
        recipients:
          - sbis1999@gmail.com
  ios-sonarqube:
    name: iOS sonarqube
    environment:
      vars:
        SONAR_TOKEN: "Encrypted(Z0FBQUFBQmZpQmtjU3JxNFJMOHBNMXYzZV9yMkZpb1p0Y2NKQ0pWbjhiNjNRLWhzcndDa2NMRU5teTVtVWlpYlFCTnF6eHVLMlNDaTVVQWxERHJGb2JRX0tZSm5jOUtmQUZ6Q2FVQjlzSW43VGE0WkZYdzVuOHVYSHdkSHdTOE82MlAzVXNoeEVPSm8=)"
        SONAR_PROJECT_KEY: "Encrypted(Z0FBQUFBQmZpbVhKVXc3eldWX0t2am5jWG1MU0RwOEFJVThkMmdZRHB1YTZDdkhMcGFqaGNQR2plYWNmYkd0UkVOZFQyZWtkMFhIYXVnN1RyWkd1UjZPNGRnTWFIZDRvUHc9PQ==)"
        SONAR_ORG_KEY: "Encrypted(Z0FBQUFBQmZpQ2E2ZUQ3N3NwajdDOUhYYkRXUnN3WW84WEdNeVBYUm1LcjNxLW5NdV9JVWMxbUt5cVc0VHUySWNYeVhIX3pMNGtjVklwTlY0MTBDX1dVX3VQNXBlbVZRRnc9PQ==)"
      xcode: latest
      cocoapods: default
    scripts:
      - |
        # download and install sonarqube
        wget -O $FCI_BUILD_DIR/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-macosx.zip
        unzip $FCI_BUILD_DIR/sonar-scanner.zip
        mv sonar-scanner-* sonar-scanner
      - |
        # generate test coverage result
        xcodebuild \
        -project "BMI Calculator.xcodeproj" \
        -scheme "BMI Calculator" \
        -sdk iphonesimulator \
        -destination 'platform=iOS Simulator,name=iPhone 11 Pro,OS=14.0' \
        -derivedDataPath Build/ \
        -enableCodeCoverage YES \
        clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - |
        # convert coverage report to sonarqube format
        bash xccov-to-sonarqube-generic.sh Build/Logs/Test/*.xcresult/ > sonarqube-generic-coverage.xml
      - |
        # sonarqube analysis
        export PATH=$PATH:$FCI_BUILD_DIR/sonar-scanner/bin
        sonar-scanner \
        -Dsonar.projectKey=$SONAR_PROJECT_KEY \
        -Dsonar.organization=$SONAR_ORG_KEY \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.projectVersion=1.0.0-cm \
        -Dsonar.sources=. \
        -Dsonar.cfamily.build-wrapper-output.bypass=true \
        -Dsonar.coverageReportPaths=sonarqube-generic-coverage.xml \
        -Dsonar.c.file.suffixes=- \
        -Dsonar.cpp.file.suffixes=- \
        -Dsonar.objc.file.suffixes=-
    publishing:
      email:
        recipients:
          - waylonlinux@gmail.com
